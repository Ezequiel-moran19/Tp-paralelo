1️⃣ Persona --> Carrito : crea

Qué significa: Una persona (el cliente que ingresa su nombre) crea un carrito para hacer su compra.

Por qué: Cada usuario necesita su propio carrito independiente. 
No tiene sentido que varios usuarios compartan el mismo carrito.

2️⃣ Carrito "1" o-- "*" CarritoItem

Qué significa: Un carrito tiene muchos CarritoItems (uno por cada producto agregado).

Por qué: Cada vez que el cliente agrega un producto, se crea un CarritoItem dentro del carrito. 
Esto es composición porque si se destruye el carrito, también se destruyen sus items.

3️⃣ CarritoItem "*" --> "1" Producto

Qué significa: Cada CarritoItem refiere a un Producto específico.

Por qué: El item “apunta” al producto que representa (nombre, precio, id) pero no lo modifica. 
Solo toma sus datos para calcular subtotal y cantidad.

4️⃣ Ticket "1" o-- "*" TicketItem

Qué significa: Un ticket contiene muchos TicketItems, que son como snapshots de los CarritoItems al momento de confirmar la compra.

Por qué: Cada compra genera un ticket con los productos comprados. Esto es composición porque los TicketItems dependen del ticket: 
si el ticket se borra, los items también desaparecen.

5️⃣ Ticket --> Persona : incluye

Qué significa: El ticket guarda el nombre de la persona que hizo la compra.

Por qué: Para mostrar en el ticket quién compró y poder registrar la venta correctamente.

6️⃣ Carrito --> Ticket : genera

Qué significa: El carrito se transforma en un ticket al momento de finalizar la compra.

Por qué: Es la acción de “confirmar compra” → todos los items del carrito se copian a un ticket para registrar la venta.

7️⃣ CarritoController --> Carrito

Qué significa: El controlador de carrito maneja la lógica del carrito (agregar, eliminar, cambiar cantidad).

Por qué: Mantener la lógica separada de la vista permite organizar mejor el código y facilita tests.

8️⃣ ProductosController --> Producto

Qué significa: El controlador de productos accede y filtra los productos activos, maneja búsqueda y paginación.

Por qué: La vista solo muestra datos, la lógica de negocio (qué productos mostrar) se mantiene en el controller.

9️⃣ TicketController --> Ticket

Qué significa: El controlador de tickets crea tickets desde un carrito y persona y maneja la descarga en PDF.

Por qué: La vista no debe generar tickets directamente; el controller centraliza la lógica.

10️⃣ productosView --> ProductosController
11️⃣ carritoView --> CarritoController
12️⃣ ticketView --> TicketController

Qué significa: Cada vista pide información al controller y muestra los datos al usuario.

Por qué: Separación MVC: la vista solo se encarga de mostrar datos y eventos, la lógica queda en el controller.

13️⃣ utilsView ..> "*" : usadoPorTodas

Qué significa: utilsView (modales, alertas) es utilizado por todas las vistas, pero no es composición ni herencia.

Por qué: Es un conjunto de herramientas reutilizables para mostrar confirmaciones, alertas o modales sin duplicar código.

💡 Resumen conceptual:

Composición (o--) cuando los objetos dependen completamente del dueño: Carrito → CarritoItem, Ticket → TicketItem.

Asociación simple (-->) cuando un objeto solo referencia a otro sin poseerlo: CarritoItem → Producto.

Dependencia (..>) cuando se usa un objeto pero no lo contiene ni hereda: vistas → utilsView.